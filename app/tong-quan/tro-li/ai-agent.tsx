"use client";

import React, { useState, useEffect, useRef } from "react";
import { usePathname, useRouter, useSearchParams } from 'next/navigation';
import Image from 'next/image';
import { AnimatePresence, motion } from "framer-motion";
import { AiAgentListResponse , aiAgentList ,  AiAgent } from "@/app/lib/data/ai-agent";
import Link from "next/link";

export default function Page() {
  const searchParams = useSearchParams();
  const query = searchParams.get('query') || '';

  const pathname = usePathname();
  const { replace } = useRouter();
  const [showBanner, setShowBanner] = useState(true);
  const [activeIndex, setActiveIndex] = useState(0);
  const [assistantList, setAssistantList] = useState<AiAgent[]>([]);
  console.log("üöÄ ~ Page ~ assistantList:", assistantList);
  const [loading, setLoading] = useState(true);

  const faqList = [
    {
      question: "Tr·ª£ l√Ω AI ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o trong h·ªá th·ªëng PosX?",
      answer:
        "Tr·ª£ l√Ω k·∫øt n·ªëi v·ªõi d·ªØ li·ªáu b√°n h√†ng, kho v√† kh√°ch h√†ng c·ªßa b·∫°n ƒë·ªÉ t·ª± ƒë·ªông ƒë∆∞a ra quy·∫øt ƒë·ªãnh, c·∫£nh b√°o ho·∫∑c ƒë·ªÅ xu·∫•t th√¥ng qua telegram ho·∫∑c email ‚Äì gi·ªëng nh∆∞ m·ªôt tr·ª£ l√Ω gi·ªèi theo th·ªùi gian th·ª±c.",
    },
    {
      question: "AI Agent c√≥ ph√π h·ª£p v·ªõi doanh nghi·ªáp nh·ªè kh√¥ng?",
      answer: "C√≥, AI Agent linh ho·∫°t v√† d·ªÖ t√≠ch h·ª£p cho m·ªçi quy m√¥ doanh nghi·ªáp.",
    },
    {
      question: "C√°ch t√≠ch h·ª£p AI v√†o h·ªá th·ªëng?",
      answer: "Ch√∫ng t√¥i cung c·∫•p API v√† h∆∞·ªõng d·∫´n t√≠ch h·ª£p chi ti·∫øt cho ƒë·ªôi ng≈© k·ªπ thu·∫≠t.",
    },
    {
      question: "AI Agent c√≥ mi·ªÖn ph√≠ kh√¥ng?",
      answer: "C√≥ b·∫£n d√πng th·ª≠ mi·ªÖn ph√≠. Sau ƒë√≥, b·∫°n c√≥ th·ªÉ ch·ªçn g√≥i ph√π h·ª£p.",
    },
    {
      question: "T√¥i c√≥ th·ªÉ s·ª≠ d·ª•ng nhi·ªÅu AI Agent c√πng l√∫c kh√¥ng?",
      answer: "Ho√†n to√†n c√≥ th·ªÉ, h·ªá th·ªëng h·ªó tr·ª£ nhi·ªÅu AI Agent ho·∫°t ƒë·ªông song song.",
    },
  ];

  useEffect(() => {
    async function loadData() {
      try {
        setLoading(true);

        const data: AiAgentListResponse = await aiAgentList();
        console.log("üöÄ ~ loadData ~ data:", data);
        setAssistantList(data.agents);
      } catch (err: any) {
        console.log("üöÄ ~ loadData ~ err:", err);
      } finally {
        setLoading(false);
      }
    }
    loadData();
  }, []);

  return (
    <>
      {showBanner && (
        <div
          className="absolute top-0 left-1/2 transform -translate-x-1/2 w-[96%] text-white text-center p-4 flex items-center justify-center gap-2 z-50 rounded-b-[12px]"
          style={{ background: "linear-gradient(90deg, #373E4C 0%, #22252D 100%)" }}
        >
          <span>C√≤n 7 ng√†y d√πng th·ª≠ mi·ªÖn ph√≠</span>
          <Link href="/tong-quan/nang-cap">
            <button className="bg-blue-500 text-white text-sm font-semibold px-3 py-1 rounded hover:bg-blue-600 transition">
              N√¢ng c·∫•p
            </button>
          </Link>
          <button
            className="absolute right-4 top-1/2 -translate-y-1/2 text-white text-lg"
            onClick={() => setShowBanner(false)}
          >
            √ó
          </button>
        </div>
      )}
      <div className={`w-full transition-all duration-300 ${showBanner ? 'mt-12' : 'mt-0'}`}>
        <div className="flex w-full items-center justify-between mb-4">
          <h1 className="text-2xl md:text-2xl font-semibold">Tr·ª£ l√≠ A.I</h1>
        </div>

        <div className="bg-white mb-4 rounded-2xl border boder-[#DFDCE0] shadow-[0_2px_0_#D9D9D9]">
          <div className="rounded-2xl px-[5%] py-[40px] flex flex-col md:flex-row items-center justify-between gap-6">
            {/* Left - Text */}
            <div className="md:w-1/3 text-left">
              <h2 className="font-semibold text-lg mb-2">Tr·ª£ l√Ω ·∫£o A.I l√† g√¨?</h2>
              <p className="text-sm leading-relaxed">
                Tr·ª£ l√Ω AI l√† t·∫≠p h·ª£p c√°c AI chuy√™n bi·ªát trong h·ªá sinh th√°i PosX, ho·∫°t ƒë·ªông nh∆∞ nh·ªØng tr·ª£ l√Ω qu·∫£n l√Ω chuy√™n nghi·ªáp.
                <br />
                T·ª´ qu·∫£n l√Ω kho, b√°n h√†ng, marketing ƒë·∫øn l·∫≠p k·∫ø ho·∫°ch ‚Äì Tr·ª£ l√Ω l√†m vi·ªác 24/7 kh√¥ng ng∆°i ngh·ªâ.
              </p>
            </div>

            {/* Right - Images */}
            <div className="md:w-2/2 flex flex-col md:flex-row gap-4">
              <Image
                src="/ai-assistant-1.png"
                alt="AI Assistant 1"
                width={260}
                height={309}
                className="w-full h-[309px]"
              />
              <Image
                src="/ai-assistant-2.png"
                alt="AI Assistant 2"
                width={284}
                height={237}
                className="w-full h-[237px] "
              />
            </div>
          </div>
          <div className="rounded-2xl bg-[#F8F9FB] py-10 px-4">
            <div className="mx-auto">
              <h2 className="text-xl font-semibold mb-6">Danh s√°ch tr·ª£ l√Ω ·∫£o</h2>

              {loading ? (
                <div>ƒêang t·∫£i...</div>
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {assistantList.map((assistant, index) => (
                    <div
                      key={assistant.id}
                      className="bg-white rounded-xl shadow-sm border border-[#E5E7EB] p-4 flex flex-col gap-3 w-full"
                    >
                      <div className="flex gap-3 items-start">
                        <Image
                          src="/ai-avatar-default.png"
                          alt={assistant.name}
                          width={284}
                          height={237}
                          className="w-16 h-16 object-cover rounded-md"
                        />
                        <div className="flex flex-col">
                          <h3 className="text-sm font-semibold">{assistant.name}</h3>
                          <p className="text-sm text-gray-500 leading-snug line-clamp-3">
                            {assistant.description}
                          </p>
                        </div>
                      </div>
                      <hr className="border-t border-gray-200" />
                      <div className="flex flex-col xl:flex-row justify-between text-sm items-start gap-1 sm:gap-0">
                        <span className="text-blue-600 font-semibold">
                          {assistant.price}ƒë<span className="text-gray-600 font-normal">/th√°ng</span>
                        </span>
                        <span className="text-gray-800 flex items-center gap-1">
                          ‚≠ê <span className="font-semibold">4.9</span>
                          <span className="text-gray-500">(70 t√≠ch h·ª£p)</span>
                        </span>
                      </div>
                      <button 
                        onClick={() => replace(`/tong-quan/tro-li/${assistant.id}`)}
                        className="mt-1 bg-blue-500 hover:bg-blue-600 transition text-white font-medium text-sm py-2 rounded-lg"
                      >
                        Xem chi ti·∫øt ‚Üó
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="bg-white p-4 rounded-2xl border boder-[#DFDCE0] shadow-[0_2px_0_#D9D9D9]">
          <h2 className="font-semibold mb-2">C√¢u h·ªèi th∆∞·ªùng g·∫∑p</h2>
          {faqList.map((faq, index) => (
              <div key={index} className="border-b last:border-b-0">
                <button
                  onClick={() => setActiveIndex(index === activeIndex ? -1 : index)}
                  className="w-full text-left py-4 flex justify-between items-center font-medium text-sm"
                >
                  <span>{faq.question}</span>
                  <span className="text-lg">{index === activeIndex ? "‚àí" : "+"}</span>
                </button>

                <AnimatePresence initial={false}>
                  {index === activeIndex && (
                    <motion.div
                      key="content"
                      initial={{ height: 0, opacity: 0 }}
                      animate={{ height: "auto", opacity: 1 }}
                      exit={{ height: 0, opacity: 0 }}
                      transition={{ duration: 0.25, ease: "easeInOut" }}
                    >
                      <div className="overflow-hidden">
                        <p className="text-sm text-gray-600 pb-4">{faq.answer}</p>
                      </div>
                    </motion.div>
                  )}
                </AnimatePresence>
              </div>
            ))}
        </div>
      </div>
    </>
  );
}
